Requirement 
		 1.	Create a class to store the coordinates (MapCoordinate)
			Create an abstract class that stores a list of coordinates that make up a location (LocationTrigger)
			Create a class inherated from ObservableCollection limited to generics of LocationTrigger to store lists of locations (LocationTriggerCollection)
		 2.	Reuse Polygon class to determine if point is within an list of coordinates contained in a LocationTrigger
			Determine a bounding box for the polygon and check if point is within the bounding box first to improve performance
			Modify LocationTrigger to test if a point is within its coordinates
			Modify LocationTriggerCollection to generate a list of its locations triggers contain a point
		 3.	Add a Haversine function into MapCooordinate to get determine distance in between 2 points(add method for miles too for user conveniance)
			Add methods to LocationTrigger for checking distance (distance to centre, distance to closest point on perimeter) 
			Modify LocationTriggerCollection to create a list of locations sorted by distance, the methods should be virtual to allow user to override and use different methods
		 4.	Create a class to store a normalised bearing range and determine if a bearing is within that range(BearingRange)
			Modify MapCoordinate to calculate the bearing between itsself and another coordinate
			Modify LocationTrigger to generate a BearingRange from a specifed coordinate that best represents the bearings at which it can be seen from(option to override and use different methods should be given to user)
			Modify LocationTriggerCollection to create a list of the locations at a specified bearing sorted by distance
		 5. Add a PropertyChangedNotificationEvent to LocationTrigger 
			Add ability to auto sort to LocationTriggerCollection based on a generic comparison
			Create a class to process a coordinate and update the UI bindable lists
			Send event whenever the information is updated
			
			